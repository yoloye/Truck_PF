% ====================================================================================================================
%                                            Copyright 2019 by Mohamed W. Mehrez & Wenrui Ye
%                                                       All rights reserved. 
% ====================================================================================================================
% ====================================================================================================================
% [zz] = NonCrossable_PF(xx, yy, x_x, x_y, V, v_y, Vo, LT, wT)
% NonCrossable_PF is a function that gives value of PF generated by
%                 Non-Crossable obstacles
% Effect: Takes basic information of object and road, Calculate PF of uncrossable obstacle such as vehicles 
%           and return value of PF. The road only has two lanes.
% Variables: xx(vehicle's longitudinal position), xub(vehicle's lateral position), 
%            x_x(x position of obstacle's geo center), x_y(y position of obstacle's geo center),
%            V(vehicle's longitudinal velocity), v_y(lateral velocity of obstacle)
%            Vo(obstable longitudinal velocity),
%            LT(shape of obstacle-Length(half)), wT(shape of obstacle-Width(half))  
% Returns: zz(The potential field generated by Non-Crossable obstacles).
% Example: [zz] = NonCrossable_PF(0, 60, 20, 3.5, 25,0, 15, 2.5, 1) -> PF
%                 on that point 0,60
% a_n, a_max and sd will change driving style(1,6,25),(3,6,5)
% ====================================================================================================================
function [zz] = NonCrossable_PF(xx, yy, x_x, x_y, V, v_y, Vo, LT, wT)
    X01=1.5;%Minumum safe longitudinal distance
    Y01=0.5;%Minumum safe lateral distance
    T0=0.25; %Safe time gap
    a_n=1; %Normal acceleration
    ve_v= 2*pi/180*V; %constant heading angles of Theta toward each other * V
    ve_o= 2*pi/180*Vo; %uoi is the longitudinal velocity of the ith obstacle,
    Vyo=0; % vehicle lateral velocity
    a_max=6; %Max acceleration
    sd = 2;
    dY = if_else( (abs(yy-x_y)<wT), 0, if_else( (yy > x_y), (yy - x_y -wT) , (yy - x_y +wT) ) ); %This is for casadi
    dX = if_else( abs(xx - x_x) < (LT+1),  -(1), if_else(xx >x_x,xx - x_x-LT -(sd),xx - x_x + LT + (sd))); 
    Xn=X01+V*T0+max(-(V-Vo)*sign(dX),0)^2/2/a_n;
    Yn=Y01+(ve_v+ve_o)*T0+max(-(v_y-Vyo)*sign(dY),0)^2/2/a_n;
    Xm=max(max(-(V-Vo)*sign(dX),0)^2/2/a_max,0.5*X01);
    Ym=max(-(v_y-Vyo)*sign(dY),0)^2/2/a_max;
    d=sqrt((dX/Xn)^2+(dY/Yn)^2);
    % Some parameters
    U_0=0.3;
    Umax=3.3;
    ds=1;
    dm=max(Xm/Xn,Ym/Yn);
    b1=log(U_0/Umax)/log(dm/ds); % b1 is shape parameters
    a1=U_0*ds^b1; % a1 is intensity parameters                 
    zz_m = 50*a1/(d^b1);
    zz =  if_else(zz_m<0.05, 0, if_else(zz_m == NaN, 0, if_else(zz_m >1000, 1000, zz_m)));
end